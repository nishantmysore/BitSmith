generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RegisterAccessType {
  RO
  WO
  RW
  RW1
  W1
  W1C
  RMW
  RSVD
}

enum FieldAccessType {
  RO
  WO
  RW
  RW1
  W1
  W1C
  RMW
  RSVD
}

// Auth related models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Device relationships
  ownedDevices     Device[]  @relation("DeviceOwner")
  sharedDevices    Device[]  @relation("DeviceSharing")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Device {
  id          String     @id @default(cuid())
  name        String
  description String
  isPublic    Boolean    @default(false)
  littleEndian   Boolean @default(true)
  defaultClockFreq Int?  

  version String? 

  // Owner relationship
  ownerId     String?
  owner       User?      @relation("DeviceOwner", fields: [ownerId], references: [id])
  
  // Users who have access to this device
  sharedWith  User[]     @relation("DeviceSharing")
  
  // If this device was copied from another device
  originalDeviceId String?
  originalDevice   Device?  @relation("DeviceCopies", fields: [originalDeviceId], references: [id])
  copies          Device[] @relation("DeviceCopies")
  
  // Existing relationships
  peripherals Peripheral[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([ownerId])
  @@index([originalDeviceId])
}

model Peripheral {
  id String @id @default(cuid())
  name String
  description String
  baseAddress BigInt  // hex address
  size BigInt        // address space size
  
  // Relations
  deviceId String
  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  registers Register[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deviceId])
}

model Register {
  id          String     @id @default(cuid())
  name        String
  description String
  width       Int 
  addressOffset   BigInt @default(0)
  resetValue  BigInt @default(0)
  resetMask     BigInt?            // New optional field
  readAction  String?
  writeAction String? 
  modifiedWriteValues String?          // New optional field
  access      RegisterAccessType 

  isArray     Boolean    @default(false)
  arraySize   Int?       // number of elements in array
  arrayStride BigInt?    // address increment between elements (hex)
  namePattern String?    // e.g. "%s[%d]" or "%s_%d"
   
  peripheralId String
  peripheral  Peripheral @relation(fields: [peripheralId], references: [id], onDelete: Cascade)

  fields      Field[]    @relation("RegisterToField")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([peripheralId, name])
}

model Field {
  id          String      @id @default(cuid())
  name        String
  access      FieldAccessType
  description String

  bitOffset   Int @default(0)
  bitWidth    Int @default(0)

  readAction  String?
  writeAction String?

  registerId  String
  register    Register    @relation("RegisterToField", fields: [registerId], references: [id], onDelete: Cascade)
  enumeratedValues FieldEnum[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@index([registerId])
}

model FieldEnum {
  id          String   @id @default(cuid())
  name        String
  value       Int
  description String?

  fieldId     String
  field       Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([fieldId, value])
  @@index([fieldId])
}
